diff --git a/libcxx/include/CMakeLists.txt b/libcxx/include/CMakeLists.txt
index 29a317b8a..2c67356af 100644
--- a/libcxx/include/CMakeLists.txt
+++ b/libcxx/include/CMakeLists.txt
@@ -136,6 +136,7 @@ set(files
   set
   setjmp.h
   shared_mutex
+  source_location
   span
   sstream
   stack
diff --git a/libcxx/include/module.modulemap b/libcxx/include/module.modulemap
index 750cd3858..9cc800dd9 100644
--- a/libcxx/include/module.modulemap
+++ b/libcxx/include/module.modulemap
@@ -599,6 +599,10 @@ module std [system] {
       header "experimental/set"
       export *
     }
+    module source_location {
+      header "source_location"
+      export *
+    }
     module span {
       header "span"
       export *
diff --git a/libcxx/include/source_location b/libcxx/include/source_location
new file mode 100644
index 000000000..84805cde4
--- /dev/null
+++ b/libcxx/include/source_location
@@ -0,0 +1,87 @@
+// -*- C++ -*-
+//===------------------------------ source_location ----------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===---------------------------------------------------------------------===//
+
+#ifndef _LIBCPP_SOURCE_LOCATION
+#define _LIBCPP_SOURCE_LOCATION
+
+/*
+    source_location synopsis
+
+namespace std {
+  struct source_location {
+    // source location construction
+    static consteval source_location current() noexcept;
+    constexpr source_location() noexcept;
+
+    // source location field access
+    constexpr uint_least32_t line() const noexcept;
+    constexpr uint_least32_t column() const noexcept;
+    constexpr const char* file_name() const noexcept;
+    constexpr const char* function_name() const noexcept;
+
+  private:
+    uint_least32_t line_;        // exposition only
+    uint_least32_t column_;      // exposition only
+    const char* file_name_;      // exposition only
+    const char* function_name_;  // exposition only
+  };
+}
+*/
+
+#include <__config>
+#include <cstdint>
+#include <type_traits>
+#include <version>
+
+_LIBCPP_BEGIN_NAMESPACE_STD
+
+#if _LIBCPP_STD_VER > 17
+
+struct source_location {
+  // TODO: current() should be marked consteval instead of constexpr,
+  // but current compiler implementations seem buggy and return callee's location.
+  static constexpr source_location
+  current(const char* __file = __builtin_FILE(),
+          const char* __func = __builtin_FUNCTION(),
+          uint_least32_t __line = __builtin_LINE(),
+#if __has_builtin(__builtin_COLUMN)
+          uint_least32_t __col = __builtin_COLUMN()) noexcept {
+#else
+          uint_least32_t __col = 0) noexcept {
+#endif
+    source_location __sloc;
+    __sloc.__file = __file;
+    __sloc.__func = __func;
+    __sloc.__line = __line;
+    __sloc.__col = __col;
+    return __sloc;
+  }
+
+  constexpr source_location() noexcept : __file("unknown"),
+                                         __func(__file),
+                                         __line(0),
+                                         __col(0) {}
+
+  constexpr uint_least32_t line() const noexcept { return __line; }
+  constexpr uint_least32_t column() const noexcept { return __col; }
+  constexpr const char* file_name() const noexcept { return __file; }
+  constexpr const char* function_name() const noexcept { return __func; }
+
+private:
+  const char* __file;
+  const char* __func;
+  uint_least32_t __line;
+  uint_least32_t __col;
+};
+
+#endif // _LIBCPP_STD_VER > 17
+
+_LIBCPP_END_NAMESPACE_STD
+
+#endif // _LIBCPP_SOURCE_LOCATION
diff --git a/libcxx/include/version b/libcxx/include/version
index 813bc1ab9..5b2475ee8 100644
--- a/libcxx/include/version
+++ b/libcxx/include/version
@@ -132,6 +132,7 @@ __cpp_lib_shared_mutex                                  201505L <shared_mutex>
 __cpp_lib_shared_ptr_arrays                             201611L <memory>
 __cpp_lib_shared_ptr_weak_type                          201606L <memory>
 __cpp_lib_shared_timed_mutex                            201402L <shared_mutex>
+__cpp_lib_source_location                               201907L <source_location>
 __cpp_lib_shift                                         201806L <algorithm>
 __cpp_lib_smart_ptr_for_overwrite                       202002L <memory>
 __cpp_lib_source_location                               201907L <source_location>
